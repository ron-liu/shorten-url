pipeline {
	agent any

    stages {
        stage('init') {
            steps {
                checkout scm
            }
        }
        stage('build') {
            steps {
                nodejs('6') {
                    sh 'npm run build'
                }
            }
        }
        stage('test') {
            steps {
                nodejs('6') {
                    sh 'npm run test:ci'
                }
            }
        }
        stage('build images') {
            failFast true
            parallel {
                stage('web') {
                    steps {
                        dir('web') {
                            withCredentials([usernamePassword(credentialsId: env.ACR_CRED_ID, usernameVariable: 'ACR_USER', passwordVariable: 'ACR_PASSWORD')]) {
                                script {
                                    sh 'docker login -u $ACR_USER -p $ACR_PASSWORD http://$ACR_LOGIN_SERVER'
                                    // build image
                                    def imageWithTag = "$env.ACR_LOGIN_SERVER/shorten-web:$env.BUILD_NUMBER"
                                    def image = docker.build imageWithTag
                                    // push image
                                    image.push()
                                }
                            }
                        }
                    }
                }
                stage('server') {
                    steps {
                        dir('server') {
                            withCredentials([usernamePassword(credentialsId: env.ACR_CRED_ID, usernameVariable: 'ACR_USER', passwordVariable: 'ACR_PASSWORD')]) {
                                script {
                                    sh 'docker login -u $ACR_USER -p $ACR_PASSWORD http://$ACR_LOGIN_SERVER'
                                    // build image
                                    def imageWithTag = "$env.ACR_LOGIN_SERVER/shorten-server:$env.BUILD_NUMBER"
                                    def image = docker.build imageWithTag
                                    // push image
                                    image.push()
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('deploy to kubernetes') {
            steps {
                kubernetesDeploy credentialsType: 'SSH',
                     ssh: [sshServer: env.ACS_SERVER, sshCredentialsId: env.ACS_CRED_ID],
                     dockerCredentials: [[url: "http://$env.ACR_LOGIN_SERVER", credentialsId: env.ACR_CRED_ID]],
                     secretName: env.ACR_LOGIN_SERVER,
                     configs: 'deploy/shorten-deploy.yml'
            }
        }
    }

    post {
        always {
            junit '**/junit.xml'
        }
    }
}